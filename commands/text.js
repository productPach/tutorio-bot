const User = require("../models/User");
const { getChatCompletion } = require("../services/openaiService");
const splitTextWithFormulas = require("../utils/splitTextWithFormulas");
const renderFormula = require("../utils/renderFormula");

const MAX_MESSAGE_LENGTH = 2000;
const MAX_FREE_MESSAGES_PER_DAY = 3;
const DAILY_MESSAGE_LIMIT_PREMIUM = 500;
const INACTIVITY_TIMEOUT = 45 * 24 * 60 * 60 * 1000; // 45 –¥–Ω–µ–π
const MAX_HISTORY_FREE = 15;
const MAX_HISTORY_PREMIUM = 30;

// –û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
function estimateHistoryTokens(history) {
  return history.reduce((tokens, msg) => {
    return tokens + Math.ceil(msg.content.length / 2) + 3;
  }, 0);
}

module.exports = async function text(ctx) {
  const telegramId = ctx.from.id.toString();
  const text = ctx.message.text;
  const now = new Date();

  if (text.length > MAX_MESSAGE_LENGTH) {
    return ctx.reply(
      `–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º ${MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.`
    );
  }

  let user = await User.findOne({ telegramId });
  if (!user) {
    return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ä–µ–∂–∏–º–∞
  if (!user.selectedSubject) {
    return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /subject");
  }
  if (!user.selectedMode) {
    return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–æ–π /mode");
  }

  // –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (user.lastMessageAt && now - user.lastMessageAt > INACTIVITY_TIMEOUT) {
    user.chatHistory = [];
  }
  user.lastMessageAt = now;

  // –õ–∏–º–∏—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!user.isPremium) {
    const today = now.toISOString().slice(0, 10);
    if (user.lastMessageDate !== today) {
      user.dailyMessageCount = 0;
      user.lastMessageDate = today;
    }

    if ((user.dailyMessageCount || 0) >= MAX_FREE_MESSAGES_PER_DAY) {
      await user.save();
      return ctx.reply(
        `üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (${MAX_FREE_MESSAGES_PER_DAY} –≤ —Å—É—Ç–∫–∏) –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É /buy –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.`
      );
    }

    user.dailyMessageCount = (user.dailyMessageCount || 0) + 1;
    user.lastMessageDate = today;
  } else {
    // –î–ª—è –ø—Ä–µ–º–∏—É–º ‚Äî –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    const today = now.toISOString().slice(0, 10);
    if (user.lastActiveDate !== today) {
      user.dailyCount = 0;
      user.lastActiveDate = today;
    }
    user.dailyCount = (user.dailyCount || 0) + 1;
    if (user.dailyCount > DAILY_MESSAGE_LIMIT_PREMIUM) {
      await user.save();
      return ctx.reply(
        "üö´ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–≤—Ç—Ä–∞!"
      );
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è
  user.chatHistory = user.chatHistory || [];
  user.chatHistory.push({ role: "user", content: text });

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
  const MAX_TOKENS = user.isPremium ? 8000 : 4000;
  let optimizedHistory = user.chatHistory;
  if (estimateHistoryTokens(optimizedHistory) > MAX_TOKENS) {
    optimizedHistory = optimizedHistory.slice(-8);
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç OpenAI
    const reply = await getChatCompletion(
      optimizedHistory,
      user.selectedSubject,
      user.selectedMode
    );

    user.chatHistory.push({ role: "assistant", content: reply });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
    const historyLimit = user.isPremium
      ? MAX_HISTORY_PREMIUM
      : MAX_HISTORY_FREE;
    if (user.chatHistory.length > historyLimit) {
      user.chatHistory = user.chatHistory.slice(-historyLimit);
    }

    await user.save();

    const parts = splitTextWithFormulas(reply);
    for (const part of parts) {
      if (part.type === "text" && part.content.trim()) {
        await ctx.reply(part.content);
      } else if (part.type === "formula") {
        try {
          const image = await renderFormula(part.content); // await, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
          await ctx.replyWithPhoto({ source: image });
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ —Ñ–æ—Ä–º—É–ª—ã:", e);
          await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É.`);
        }
      }
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞:", err);

    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (
      user.chatHistory.length > 0 &&
      user.chatHistory[user.chatHistory.length - 1].role === "user"
    ) {
      user.chatHistory.pop();
    }

    await user.save();

    if (err.response?.status === 402 || err.status === 402) {
      ctx.reply("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.");
      const ADMIN_ID = process.env.ADMIN_TELEGRAM_ID;
      if (ADMIN_ID) {
        ctx.telegram.sendMessage(
          ADMIN_ID,
          `‚ùóÔ∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞! –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.`
        );
      }
    } else {
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
};
