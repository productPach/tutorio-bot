const OpenAI = require("openai");

const deepseek = new OpenAI({
  apiKey: process.env.DEEPSEEK_API_KEY,
  baseURL: "https://api.deepseek.com/v1",
});

// –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç —Å –æ–±—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
const BASE_SYSTEM_PROMPT = `
–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä Tutorio, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É—á–µ–Ω–∏–∫—É –∏ –∏—Ö —Ä–æ–¥–∏—Ç–µ–ª—è–º –µ—Å–ª–∏ —É—á–µ–Ω–∏–∫ - —Ä–µ–±–µ–Ω–æ–∫.

üìå –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
- –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏ –ø–æ 1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞ —Ç–µ–∫—Å—Ç–∞.
- –ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–ø–ª–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: üå± üí¨ üîπ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π.
- –í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
üéØ –¶–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∑–∞–¥–∞—á–µ, –ø—Ä–∏–≤–∏—Ç—å –ª—é–±–æ–≤—å –∫ –∑–Ω–∞–Ω–∏—è–º, –º–æ–∂–Ω–æ –¥–∞–∂–µ —Ä–µ–¥–∫–æ, –Ω–æ –¥–∞–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫ —ç—Ç–∏ –Ω–∞–≤—ã–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –≤ –∂–∏–∑–Ω–∏, –º–æ–∂–Ω–æ –≤ –Ω–µ–º–Ω–æ–≥–æ —à—É—Ç–æ—á–Ω–æ–π –º–∞–Ω–µ—Ä–µ.
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
function buildSystemPrompt(subject, mode) {
  let subjectPrompt = "";
  switch (subject) {
    case "math":
      subjectPrompt = "–ü–æ–º–æ–≥–∞–µ—à—å —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π: –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è, –∑–∞–¥–∞—á–∏.";
      break;
    case "physics":
      subjectPrompt = "–ü–æ–º–æ–≥–∞–µ—à—å —Å —Ñ–∏–∑–∏–∫–æ–π: –º–µ—Ö–∞–Ω–∏–∫–∞, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –∏ –¥—Ä.";
      break;
    case "chemistry":
      subjectPrompt = "–ü–æ–º–æ–≥–∞–µ—à—å —Å —Ö–∏–º–∏–µ–π: —Ñ–æ—Ä–º—É–ª—ã, —Ä–µ–∞–∫—Ü–∏–∏, –∑–∞–¥–∞—á–∏.";
      break;
    case "russian":
      subjectPrompt = "–ü–æ–º–æ–≥–∞–µ—à—å —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º: –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è.";
      break;
    default:
      subjectPrompt = "–ü–æ–º–æ–≥–∞–µ—à—å —Å —É—á–µ–±–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏.";
  }

  let modePrompt = "";
  if (mode === "fast") {
    modePrompt =
      "–î–∞–≤–∞–π –±—ã—Å—Ç—Ä—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏—è.";
  } else if (mode === "tutor") {
    modePrompt =
      "–ù–µ –¥–∞–≤–∞–π –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –∞ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–π —à–∞–≥–∏ –∏ –¥–∞–≤–∞–π –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã.";
  }

  return `${BASE_SYSTEM_PROMPT}\n${subjectPrompt}\n${modePrompt}`;
}

async function getChatCompletion(history, subject, mode) {
  try {
    const systemPrompt = buildSystemPrompt(subject, mode);

    const messages = [{ role: "system", content: systemPrompt }, ...history];

    const completion = await deepseek.chat.completions.create({
      model: "deepseek-chat",
      messages,
      temperature: 0.7,
      max_tokens: 512,
    });

    return completion.choices[0].message.content;
  } catch (error) {
    console.error("DeepSeek API Error:", error);
    return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  }
}

module.exports = { getChatCompletion };
