const { Markup } = require("telegraf");
const User = require("../models/User");
const { getChatCompletion } = require("../services/openaiService");

const MAX_FREE_MESSAGES = 3;
const INACTIVITY_TIMEOUT = 45 * 24 * 60 * 60 * 1000; // 45 –¥–Ω–µ–π
const MAX_MESSAGE_LENGTH = 2000; // –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
const PREMIUM_HISTORY_LENGTH = 30; // –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const FREE_HISTORY_LENGTH = 15; // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö
const DAILY_MESSAGE_COUNT = 500; // –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
function estimateHistoryTokens(history) {
  return history.reduce((tokens, message) => {
    // 1 —Ç–æ–∫–µ–Ω ‚âà 2 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º + 3 —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Ä–æ–ª—å
    return tokens + Math.ceil(message.content.length / 2) + 3;
  }, 0);
}

async function setupBot(bot) {
  bot.telegram.setMyCommands([
    { command: "start", description: "–°—Ç–∞—Ä—Ç" },
    { command: "buy", description: "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" },
    { command: "restart", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫" },
    { command: "reset", description: "–ó–∞–±—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É" },
    { command: "profile", description: "–ü—Ä–æ—Ñ–∏–ª—å" },
  ]);

  bot.start(async (ctx) => {
    const telegramId = ctx.from.id.toString();
    let user = await User.findOne({ telegramId });
    if (!user) user = await User.create({ telegramId });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if (!user.chatHistory) {
      user.chatHistory = [];
      await user.save();
    }

    ctx.reply(
      "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Mentorio ‚Äî –±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —á—É–≤—Å—Ç–≤–∞—Ö, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è. –í—Å—ë –∞–Ω–æ–Ω–∏–º–Ω–æ, –±–µ—Ä–µ–∂–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n\n–ü–∏—à–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî —è —Ä—è–¥–æ–º."
    );
  });

  bot.command("restart", (ctx) => {
    ctx.reply(
      "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü–∏—à–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî —è —Ä—è–¥–æ–º."
    );
  });

  bot.command("reset", (ctx) => {
    ctx.reply(
      "‚ö†Ô∏è –¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –ø–∞–º—è—Ç—å –ú–µ–Ω—Ç–æ—Ä–∏–æ –æ–± —ç—Ç–æ–π –±–µ—Å–µ–¥–µ.",
      Markup.inlineKeyboard([
        [Markup.button.callback("üßπ –ó–∞–±—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É", "confirm_reset")],
        [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_reset")],
      ])
    );
  });

  bot.command("profile", async (ctx) => {
    const telegramId = ctx.from.id.toString();
    const user = await User.findOne({ telegramId });
    const isPro = user?.isPremium;
    const remaining = Math.max(
      0,
      MAX_FREE_MESSAGES - (user?.messagesCount || 0)
    );
    const sub = isPro ? "–ü—Ä–æ" : "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è";
    const limitText = isPro
      ? "‚àû –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
      : `${remaining} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${MAX_FREE_MESSAGES} –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏`;

    ctx.reply(
      `üßæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nID: ${telegramId}\n–ü–æ–¥–ø–∏—Å–∫–∞: ${sub}\n–õ–∏–º–∏—Ç—ã: ${limitText}`
    );
  });

  bot.command("buy", (ctx) => {
    ctx.reply(
      'üíñ –ü–æ–¥–ø–∏—Å–∫–∞ "–ü—Ä–æ" ‚Äî —ç—Ç–æ –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –ú–µ–Ω—Ç–æ—Ä–∏–æ –∑–∞ 1000 ‚ÇΩ –≤ –º–µ—Å—è—Ü. –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –∑–∞–±–æ—Ç–∞.\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n\nüëâ https://mentorio.pro.ru/pay'
    );
  });

  bot.action("confirm_reset", async (ctx) => {
    const telegramId = ctx.from.id.toString();
    await User.findOneAndUpdate(
      { telegramId },
      {
        messagesCount: 0,
        firstMessageAt: null,
        chatHistory: [], // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
      }
    );
    await ctx.editMessageText("üß† –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.");
  });

  bot.action("cancel_reset", async (ctx) => {
    await ctx.editMessageText("üö´ –û—Ç–º–µ–Ω–∞. –ú—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–∂–¥–µ.");
  });

  bot.on("text", async (ctx) => {
    const telegramId = ctx.from.id.toString();
    const text = ctx.message.text;
    const now = new Date();

    let user = await User.findOne({ telegramId });
    if (!user) {
      user = await User.create({
        telegramId,
        chatHistory: [],
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if (text.length > MAX_MESSAGE_LENGTH) {
      return ctx.reply(
        `–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ ${MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏
    if (user.lastMessageAt && now - user.lastMessageAt > INACTIVITY_TIMEOUT) {
      user.chatHistory = [];
    }
    user.lastMessageAt = now;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!user.isPremium) {
      if (!user.firstMessageAt) {
        user.firstMessageAt = now;
        user.messagesCount = 0;
      } else {
        const diff = now - user.firstMessageAt;
        if (diff >= 7 * 24 * 60 * 60 * 1000) {
          user.messagesCount = 0;
          user.firstMessageAt = now;
        }
      }

      user.messagesCount++;

      if (user.messagesCount > MAX_FREE_MESSAGES) {
        await user.save();
        return ctx.reply(
          "üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø: https://mentorio.pro/pay/" +
            telegramId
        );
      }
    }

    // –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    if (user.isPremium) {
      const today = new Date().toISOString().split("T")[0];

      if (user.lastActiveDate !== today) {
        user.dailyCount = 0;
        user.lastActiveDate = today;
      }

      user.dailyCount = (user.dailyCount || 0) + 1;

      if (user.dailyCount > DAILY_MESSAGE_COUNT) {
        await user.save();
        return ctx.reply(
          "üö´ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–≤—Ç—Ä–∞!"
        );
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user.chatHistory.push({ role: "user", content: text });

    try {
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
      const MAX_TOKENS = user.isPremium ? 8000 : 4000;
      let optimizedHistory = user.chatHistory;

      if (estimateHistoryTokens(optimizedHistory) > MAX_TOKENS) {
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–±–∞–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ)
        optimizedHistory = optimizedHistory.slice(-8);
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      const reply = await getChatCompletion(optimizedHistory);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      user.chatHistory.push({ role: "assistant", content: reply });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
      const historyLimit = user.isPremium
        ? PREMIUM_HISTORY_LENGTH
        : FREE_HISTORY_LENGTH;

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
      if (user.chatHistory.length > historyLimit) {
        user.chatHistory = user.chatHistory.slice(-historyLimit);
      }

      await user.save();
      ctx.reply(reply);
    } catch (err) {
      console.error("GPT error:", err);

      // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (
        user.chatHistory.length > 0 &&
        user.chatHistory[user.chatHistory.length - 1].role === "user"
      ) {
        user.chatHistory.pop();
      }

      await user.save();

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –±–∞–ª–∞–Ω—Å–∞
      if (err.response?.status === 402 || err.status === 402) {
        ctx.reply("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.");
        const ADMIN_ID = process.env.ADMIN_TELEGRAM_ID;
        if (ADMIN_ID) {
          bot.telegram.sendMessage(
            ADMIN_ID,
            `‚ùóÔ∏è Low DeepSeek balance! ${telegramId} request failed.`
          );
        }
      } else {
        ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    }
  });
}

module.exports = { setupBot };
